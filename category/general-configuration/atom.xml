<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: General Configuration | Nginx Library]]></title>
  <link href="http://soumikgh.github.com/nginxlibrary/category/general-configuration/atom.xml" rel="self"/>
  <link href="http://soumikgh.github.com/nginxlibrary/"/>
  <updated>2013-10-17T14:57:44+00:00</updated>
  <id>http://soumikgh.github.com/nginxlibrary/</id>
  <author>
    <name><![CDATA[Soumik Ghosh]]></name>
    <email><![CDATA[contactSoumik@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resolving "403 Forbidden" error]]></title>
    <link href="http://soumikgh.github.com/nginxlibrary/403-forbidden-error/"/>
    <updated>2012-01-09T15:29:45+00:00</updated>
    <id>http://soumikgh.github.com/nginxlibrary/403-forbidden-error</id>
    <content type="html"><![CDATA[<p>403 Forbidden errors are Nginx's way of telling "You have requested for a resource but we cannot give it to you." 403 Forbidden is technically not an error but a HTTP status code. 403 response headers are intentionally returned in many cases such as -</p>

<ul>
<li>User is blocked from requesting that page/resource or the site as a whole.</li>
<li>User tries to access a directory but <code>autoindex</code> is set to <code>off</code>.</li>
<li>User tries to access a file that can be only accessed internally.</li>
</ul>


<p>These are some among many cases where a 403 Forbidden response is intentionally returned. But here we will talk about the causes of 403 responses that are unintentional/not desired which generally occur as a result of misconfiguration on the server side.</p>

<h3>Permissions are not set correctly</h3>

<p>This is the most common cause of this error. By permissions, I do not only mean the permissions for the file that is being accessed. In order to serve a file, Nginx needs to have <em>read</em> permissions for the file as well as <em>execute</em> permissions for every hierarchial parent directory of the file to chdir to it. For example, to access the file located at -</p>

<pre><code>/usr/share/myfiles/image.jpg
</code></pre>

<p>Nginx needs to have <em>read</em> permissions for the file as well as <em>execute</em> permissions for <code>/</code>, <code>/usr</code>, <code>/usr/share</code> and <code>/usr/share/myfiles</code>. If you use the standard 755 for directories and 644 for files (umask: 022), you should not run into this problem.</p>

<p>To check for ownership and permissions on a path, we can use the <code>namei</code> utility like this -</p>

<pre><code>$ namei -l /var/www/vhosts/example.com

f: /var/www/vhosts/example.com
drwxr-xr-x root     root     /
drwxr-xr-x root     root     var
drwxr-xr-x www-data www-data www
drwxr-xr-x www-data www-data vhosts
drwxr-xr-x clara    clara    example.com
</code></pre>

<h3>Directory index is not properly defined</h3>

<p>Sometimes, the index directive does not contain the desired directory index. For example, for a standard setup with PHP, the index directive should be -</p>

<pre><code>index index.html index.htm index.php;
</code></pre>

<p>According to this example, when a directory is acessed directly, Nginx will try to serve index.html, then index.htm and index.php after that. If none of them are found, Nginx will return a 403 header. If index.php were not defined in the root directive, Nginx would have returned 403 without checking for the existence of index.php.</p>

<p>Similarly, for a Python setup, index.py should be defined as a directory index.</p>

<p>These are the most common causes of undesired 403 responses. Feel free to leave a comment if you are still getting 403s.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CloudFlare for country blocking]]></title>
    <link href="http://soumikgh.github.com/nginxlibrary/using-cloudflare-for-country-blocking/"/>
    <updated>2011-12-29T06:10:59+00:00</updated>
    <id>http://soumikgh.github.com/nginxlibrary/using-cloudflare-for-country-blocking</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://nginxlibrary.com/images/post-images/2011/cloudflare-logo.png" width="244" height="40"></p>

<p><a href="https://www.cloudflare.com/" title="CloudFlare">CloudFlare</a> is an innovative service, providing
webmasters with a CDN (Content Delivery Network) and <a href="https://www.cloudflare.com/overview" title="CloudFlare features overview">many other things</a>.
Among these other things, it provides an IP geolocation service using which we
can use to redirect/block visitors from specific countries.</p>

<p>We need to first enable 'IP Geolocation' in the CloudFlare settings for this
to work -</p>

<p><a href="http://nginxlibrary.com/images/post-images/2011/ip_geolocation.jpg"><img src="http://nginxlibrary.com/images/post-images/2011/ip_geolocation.jpg" title="IP geolocation" alt="IP geolocation" /></a></p>

<p>We also need to make sure that the A record for the domain/sub domain is being
proxied though the CloudFlare proxy. So, enable CloudFlare for the relevant A
record from the DNS settings if it hasn't been set accordingly.</p>

<p>If everything is done properly, the HTTP_CF_IPCOUNTRY environment variable
should contain the country code for the visitor. To test it, we can write a
small script in Perl.</p>

<p>``` perl</p>

<h1>!/usr/bin/perl</h1>

<p>print "Content-type: text/html\n\n$ENV{'HTTP_CF_IPCOUNTRY'}";
```</p>

<p>Run the script and it should show you your country code. A list of country
codes can be found <a href="http://www.maxmind.com/app/iso3166">here</a>.</p>

<p>Now, we need to take care of the Nginx configuration. We need to map the
environment variable to a variable of our own, so that the value of our
variable changes depending on whether we want to allow visitors from the
country or not.</p>

<p>We need to put the following code inside the http block but outside the server
block for your website. It can be put in <code>/etc/nginx/nginx.conf</code> inside the
HTTP block or in your vhosts file, outside of the server block.</p>

<pre><code>map $http_cf_ipcountry $allow {
        default yes;
        CN no;
        MX no;
        NO no;
}
</code></pre>

<p>This sets <code>$allow</code> to yes or no, depending on the country of the visitor.
Here, we are setting the variable to no if the visitor is from China, Mexico,
or Norway. We can also set the default to no, and allow countries one by one
if we need to allow only a few countries and block all others. Now that the
variable is set, we need to instruct Nginx to serve a 403 page to the visitors
from the blocked countries. Add this anywhere inside the server block :</p>

<pre><code>if ($allow = no) {
    return 403;
}
</code></pre>

<p>This will make Nginx return a 403 Forbidden HTTP status code. A custom 403
error page can also be defined to make the error page more helpful.</p>

<p>If you are not using CloudFlare, you can still block visitors by country <a href="http://nginxlibrary.com/ip-based-country-blocking/">using the GeoIP module</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hotlink protection in Nginx]]></title>
    <link href="http://soumikgh.github.com/nginxlibrary/hotlink-protection/"/>
    <updated>2011-08-19T02:30:57+00:00</updated>
    <id>http://soumikgh.github.com/nginxlibrary/hotlink-protection</id>
    <content type="html"><![CDATA[<p>Hotlinked files can be a major cause for bandwidth leeching for some sites.
Here's how you can hotlink protect your images and other file types using a
simple location directive in your Nginx configuration file :</p>

<pre><code>location ~ \.(jpe?g|png|gif)$ {
     valid_referers none blocked mysite.com *.mysite.com;
     if ($invalid_referer) {
        return   403;
    }
}
</code></pre>

<p>Use the pipe ("|") to separate file extensions you want to hotlink protect.</p>

<p>The <code>valid_referers</code> directive contains the list of site for whom hotlinking
is allowed. Here is an explanation of the parameters for the <code>valid_referers</code>
directive :</p>

<ul>
<li>none - Matches the requests with no Referrer header.</li>
<li>blocked - Matches the requests with blocked Referrer header.</li>
<li>*.mydomain.com - Matches all the sub domains of mydomain.com. Since v0.5.33, * wildcards can be used in the server names.</li>
</ul>


<p>You can also tweak the location directive for blocking files from a specific
directory. Like this :</p>

<pre><code>location /images/ {
     valid_referers none blocked mysite.com *.mysite.com;
     if ($invalid_referer) {
        return   403;
    }
}
</code></pre>

<p>This will hotlink protect every file in any images directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hide Nginx version]]></title>
    <link href="http://soumikgh.github.com/nginxlibrary/hide-nginx-version/"/>
    <updated>2011-07-30T01:58:11+00:00</updated>
    <id>http://soumikgh.github.com/nginxlibrary/hide-nginx-version</id>
    <content type="html"><![CDATA[<p>If you are using an old version of Nginx or if you want to explicitly hide the Nginx version in your HTTP headers and your default error pages, you can use the <code>server_tokens</code> directive in your Nginx configuration. The server_tokens directive can be used either in the http, server or location block.</p>

<p>Just set <code>server_tokens</code> to <code>off</code> (it is set to <code>on</code> by default) to hide your Nginx version in all externally visible places.</p>

<pre><code>server_tokens off;
</code></pre>

<p>Just like using Apache's ServerSignature and ServerTokens directive, your Nginx version should now be hidden in the server signature and the default error pages. To check the server headers, use the <a href="http://www.webconfs.com/http-header-check.php" title="HTTP Header Checker">HTTP Header Checker utility</a> from Webconfs.com.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Converting phpBB's default .htaccess for nginx]]></title>
    <link href="http://soumikgh.github.com/nginxlibrary/converting-phpbbs-default-htaccess-for-nginx/"/>
    <updated>2011-05-11T11:50:53+00:00</updated>
    <id>http://soumikgh.github.com/nginxlibrary/converting-phpbbs-default-htaccess-for-nginx</id>
    <content type="html"><![CDATA[<p>phpBB ships with a small .htaccess file in the root that has rules to
deny access to the config.php and common.php files in the absence of a PHP
interpreter. I'll duplicate those rules for an Nginx configuration.</p>

<p>Here's how the .htaccess file looks like :</p>

<pre><code>Order Allow,Deny
Deny from All

Order Allow,Deny
Deny from All
</code></pre>

<p>And here's what you need to add to your Nginx configuration file in order to
duplicate that behaviour :</p>

<pre><code>location ~ /config.php|/common.php {
    deny all;
}
</code></pre>

<p>This will deny access to all instances of config/common.php located in the
document root, regardless of where they are located.</p>
]]></content>
  </entry>
  
</feed>
